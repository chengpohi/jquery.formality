h1. jQuery formality

*Formality* is a jQuery plugin processes any part of the DOM and returns an object representation of the inputs.

h2. Simple example

Given the following DOM structure:

<pre>
  <form id="data">
    <input type="text" name="firstName" value="John" />
    <input type="text" name="lastName" value="Doe" />
    <input type="radio" id="gender" value="male" checked="checked" />
    <input type="radio" id="gender" value="female" />
    <select id="interests" multiple="multiple">
      <option value="reading" selected="selected">Likes reading</option>
      <option value="travelling">Likes travelling</option>
      <option value="music" selected="selected">Plays music</option>
    </select>
    <input type="checkbox" name="pets" value="dog" checked="checked">Has a dog</input>
    <input type="checkbox" name="pets" value="cat">Has a cat</input>
  </form>
</pre>

You can call

<pre>
  $('#data').formality()
</pre>

And it will return the following object:

<pre>
{
  firstName: 'John',
  lastName: 'Doe',
  gender: 'male',
  interests: ['reading', 'music'],
  pets: ['dog']
}
</pre>

h2. Nested objects

_Formality_ can also create a hierarchical representation of a nested form by adding a few attributes to the HTML. This is useful when the user can create several items on the front end, which we itend on sending to the server by an ajax call.

When creating the resulting object, formality uses the *data-formality-nested* attribute to create the hierarchy. This handles two types of nesting:

h3. Objects

The basic case for using *data-formality-nested* is to group elements logically. This allows to create a javascript object closer to your domain model.

<pre>
  <form>
    <input type="text" name="name" value="Australia" />
    <div data-formality-nested="government">
      <input type="text" name="monarch" value="Elizabeth II" />
      <div data-formality-nested="ministers">
        <input type="text" name="primeMinister" value="Julia Gillard" />
        <input type="text" name="foreignAffairs" value="Kevin Rudd" />
      </div>
    </div>
  </form>
</pre>

Will generate the following object:

<pre>
{
  name: 'Australia',
  government: {
    monarch: 'Elizabeth II',
    ministers: {
      primeMinister: 'Julia Gillard',
      foreignAffairs: 'Kevin Rudd'
    }
  }
}
</pre>

h3. Arrays

When using an array-like notation for the attribute value, _formality_ will create the corresponding array in which the values will be pushed.

<pre>
  <form> 
    <input type="text" name="name" value="Australia" />
    <div data-formality-nested="cities[0]">
      <input type="text" name="name" value="Sydney" />
      <input type="text" name="postcode" value="2000" />
    </div>
    <div data-formality-nested="cities[1]">
      <input type="text" name="name" value="Melbourne" />
      <input type="text" name="postcode" value="3000" />
    </div> 
  </form>
</pre>

will generate the following object:

<pre>
{
  name: 'Australia',
  cities: [
    {
      name: 'Sydney',
      postcode: '2000'
    },
    {
      name: 'Melbourne',
      postcode: '3000'
    },
  ]
}
</pre>

h2. Alternatives

_Formality_ was built as an aternative to other jQuery pugins such as <a href="http://github.com/luning/jquery.parcel">jQuery Parcel</a> or <a href="https://github.com/jquery/jquery-datalink">jQuery Datalink</a>.

It does not intend to match the exhaustive features of these plugins, but provides advantages of its own:
* It handles semantically nested forms to create a full object hierarchy
* It does not bind any events, and thus will never clash with your existing behaviour
* Since it does maintain an internal cache, so there is not need to manually sync when updating the DOM
* It can be up to 10 times faster when reading values, especially when processing large forms in Internet Explorer

In summary, simply call $('#foo').formality() whenever you want to read the object representation of the user input!

