h1. jQuery formality

h2. Elevator pitch

*Formality* is a jQuery plugin that can process any part of the DOM and return an object representation of the inputs.
It supports all types of inputs and complex forms, with ONGL syntax for object nesting.

You can think of it as the counterpart to templating (for example using <a href="https://github.com/janl/mustache.js/">Mustache</a> or <a href="https://github.com/jquery/jquery-tmpl">jQuery Template</a>).
It can help implement MVP or MVVM models by simplifying the two-way mapping between the view and the presentation layer.

h2. Simple example

Given the following DOM structure:

<pre>
  <form id="data">
    <input type="text" name="firstName" value="John" />
    <input type="text" name="lastName" value="Doe" />
    <input type="radio" name="gender" value="male" checked="checked" />
    <input type="radio" name="gender" value="female" />
    <select name="interests" multiple="multiple">
      <option value="reading" selected="selected">Likes reading</option>
      <option value="travelling">Likes travelling</option>
      <option value="music" selected="selected">Plays music</option>
    </select>
    <input type="checkbox" name="likesPets" checked="checked">Likes pets</input>
    <input type="checkbox" name="pets" value="dog" checked="checked">Has a dog</input>
    <input type="checkbox" name="pets" value="cat">Has a cat</input>
  </form>
</pre>

If you call

<pre>
  $('#data').formality()
</pre>

It will return the following object:

<pre>
{
  firstName: 'John',
  lastName: 'Doe',
  gender: 'male',
  interests: ['reading', 'music'],
  likesPets: 'true',
  pets: ['dog']
}
</pre>

h2. Input types

Formality supports all the usual input types, with each input or input group generating a single key in the target object.
For each input type, different rules determine what value is set in the target object.

All values are set a strings. You will need to do some processing to identify numbers and booleans if need be.
However, if integrating with web services, most of them can do this mapping for you (ex. Spring MVC 3 + Jackson).

As a side note, you do not need a &lt;form&gt; object to call _formality_. The XHTML spec does not require input elements to be inside a form.

h3. Textboxes

<pre>
    <input type="text" name="firstName" />
</pre>

The value in the target object is set to the string value of the textbox.
If the textbox is empty, it will set an empty string.

<pre>
{
    firstName: 'Bob'
}
</pre>

h3. Textareas

<pre>
    <input type="textarea" name="comment" />
</pre>

Similarily to text boxes, text areas will generate a single key set to the input's value.

<pre>
{
    comment: 'That was interesting'
}        
</pre>

h3. Radio butons

<pre>
    <input type="radio" name="gender" value="male" checked="checked" />
    <input type="radio" name="gender" value="female" />
</pre>

Every group of radios with the same name generates a key in the target object, set to the value of the checked option.
However, if no option is selected, it will _not_ create a key in the target object.

<pre>
{
    gender: 'male'
}
</pre>

h3. Checkboxes

Checkboxes are usually used for 2 purposes:

<ul><li>As a single true/false selection</li></ul>
<pre>
    <input type="checkbox" name="accept" /> I accept the terms and conditions
</pre>

If a checkbox has no value attribute, the value in the target object will be 'true' or 'false' depending on the checkbox state.

<pre>
{
    accept: 'true'
}
</pre>

<ul><li>As a way to select multple items of the same kind</li></ul>
<pre>
    <input type="checkbox" name="pets" value="dog" checked="checked" /> Dog
    <input type="checkbox" name="pets" value="cat" checked="checked" /> Cat
    <input type="checkbox" name="pets" value="iguana" /> Iguana
</pre>

Each group of checkboxes with the same name generates a single key in the target object.
This key will be set to an array containing all the checked values.

<pre>
{
    pets: ['dog', 'cat']
}
</pre>

h3. Single selects

<pre>
    <input type="select" name="city">
        <option value="Sydney" selected="selected">Sydney</option>
        <option value="Paris" >Paris</option>
        <option value="NewYork">New York</option>
    </input>
</pre>

For dropdowns with a single selection, the object value will be set to the value of the selected option.
Note that browsers automatically select the first option if the default is not set explicitely.

<pre>
{
    city: 'Sydney'
}
</pre>

h3. Multiple selects

<pre>
    <input type="select" name="cities" multiple="multiple">
        <option value="Sydney" selected="selected">Sydney</option>
        <option value="Paris" selected="selected">Paris</option>
        <option value="NewYork">New York</option>
    </input>
</pre>

Multiple selects always generate an array containing all the selected options.
The array will be empty is no selection is made.

<pre>
{
    cities: ['Sydney', 'Paris']
}
</pre>
        
h2. ONGL support

_Formality_ can also create a hierarchical representation of a form. The typical use cases are:

* Creating a javascript object that can be used by the presenter or viewmodel, or that maps directly to your domain model.
* When the user can create several items on the front end, which we intend on sending to the server in bulk using ajax.

h3. How does it work

_Formality_ supports basic ONGL notation to specify how inputs should be mapped to the target object.
There are two ways of using it, which can also be combined for more flexibility:

<ul>
    <li>If the input name is set to an ONGL path, the input's value will be set in the target object accordingly.</li>
    <li>You can also set a context on any HTML elements, which will apply to every input they contains. Contexts can be ONGL paths themselves.</li>
</ul>

The 4 following snippets are equivalent:

<pre>
    <input type="text" name="person.address.state" />
    <input type="text" name="person.address.postcode" />
</pre>

<pre>
    <form data-formality-context="person">
        <div data-formality-context="address">
            <input type="text" name="state" />
            <input type="text" name="postcode" />
        </div>
    </form>
</pre>

<pre>
    <div data-formality-context="person.address">
        <input type="text" name="state" />
        <input type="text" name="postcode" />
    </div>
</pre>

<pre>
    <div data-formality-context="person">
        <input type="text" name="address.state" />
        <input type="text" name="address.postcode" />
    </div>
</pre>

h3. Element types

_Formality_ currently supports 2 ONGL notations:

h4. Objects

<pre>
    <input type="text" name="person.address.state" />
</pre>

h4. Arrays

<pre>
    <input type="text" name="world.countries[0].name" />
    <input type="text" name="world.countries[1].name" />
</pre>

h2. Alternatives

_Formality_ was built as an aternative to other jQuery pugins such as <a href="http://github.com/luning/jquery.parcel">Parcel</a> or <a href="https://github.com/jquery/jquery-datalink">jQuery Datalink</a>.

It does not intend to match the exhaustive features of these plugins, but provides advantages of its own:
* It handles semantic hierarchy to create a proper domain model in Javascript
* It does not bind any events, and thus will never clash with your existing behaviour
* Since it does maintain an internal cache, so there is not need to manually sync when updating the DOM
* It can be up to 10 times faster than parcel when reading values, especially when processing large forms in Internet Explorer

In summary, simply call $('#foo').formality() whenever you want to read the object representation of the user input!

